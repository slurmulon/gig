{"version":3,"file":"gig.umd.js","sources":["../src/timer.js","../src/gig.js"],"sourcesContent":["import raf from 'raf'\n\n/**\n * Default monotonic/stateless timer for Gig.\n * Uses requestAnimationFrame and performance.now (polyfilled).\n *\n * @param {Gig} gig parent instance provided on construction\n * @param {function} [tick] optional function to call on each tick of the clock\n */\n// TODO: Allow clock to be configured to optionally cancelAnimationFrame(interval) on each tick\nexport const clock = (gig, tick) => {\n  let last = null\n  let interval = null\n\n  const loop = () => {\n    const { time, cursor, expired } = gig\n\n    if (expired) return cancel()\n\n    if (cursor !== last) {\n      last = cursor\n\n      gig.step()\n    }\n\n    if (typeof tick === 'function') {\n      tick(gig, time)\n    }\n\n    interval = raf(loop)\n  }\n\n  const cancel = () => {\n    raf.cancel(interval)\n\n    interval = null\n  }\n\n  const timer = {\n    play () {\n      loop()\n    },\n\n    pause () {\n      cancel()\n    },\n\n    resume () {\n      timer.play()\n    },\n\n    stop () {\n      last = null\n      cancel()\n    }\n  }\n\n  timer.play()\n\n  return timer\n}\n\nexport default clock\n","import { Music as Track } from 'bach-js'\nimport { clock } from './timer'\n// TODO: Switch to Tone.Player\nimport { Howl } from 'howler'\n// import now from 'performance-now'\nimport hrtime from 'performance-now'\nimport EventEmitter from 'events'\n\n/**\n * Represents a musical song/track that can be synchronized with arbitrary behavior and data in real-time\n */\nexport class Gig extends Track {\n\n  /**\n   * @param {Object} source track represented in Bach.JSON\n   * @param {Audio} [audio] track audio\n   * @param {boolean} [loop] enable track looping\n   * @param {Object} [timer] alternative timer API (default is monotonic and uses raf)\n   * @param {Function} [now] custom monotonic timer function\n   * @param {Object} [howler] optional Howler configuration overrides\n   * @param {boolean} [stateless] enable stateless/monotonic cursor\n   */\n  constructor ({ source, audio, loop, timer, now, howler, stateless = true } = {}) {\n    super(source)\n\n    EventEmitter.call(this)\n\n    this.audio = audio\n    this.loop = loop\n    // this.tempo  = tempo // FIXME: Sync with Howler's rate property\n    this.timer  = timer || clock\n    this.now = now || hrtime\n\n    this.index = 0\n    this.times = { origin: null, last: null, beat: null, paused: null }\n    this.status = STATUS.pristine\n    this.stateless = stateless\n\n    if (audio) {\n      this.music = new Howl(Object.assign({\n        src: audio,\n        ctx: true,\n        loop\n      }, howler))\n    }\n\n    // this.listen()\n  }\n\n  /**\n   * Provides the beat found at the track's cursor\n   *\n   * @returns {Object}\n   */\n  get state () {\n    return this.at(this.cursor)\n  }\n\n  /**\n   * Provides beat found one step behind the track's cursor\n   *\n   * @returns {Object}\n   */\n  get prev () {\n    return this.at(this.cursor - 1)\n  }\n\n  /**\n   * Provides the beat found one step ahead of the track's cursor\n   *\n   * @returns {Object}\n   */\n  get next () {\n    return this.at(this.cursor + 1)\n  }\n\n  /**\n   * Determines the cyclic/relative step beat index.\n   *\n   * @returns {Number}\n   */\n  get cursor () {\n    return this.durations.cyclic(this.current)\n  }\n\n  /**\n   * Determines the global/absolute step beat index.\n   * When stateless the step is calculated based on monotonic time.\n   * When stateful the step is calculated based on current index value.\n   *\n   * @returns {Number}\n   */\n  get current () {\n    return !this.stateless ? this.index : Math.floor(this.place)\n  }\n\n  /**\n   * Determines the global/absolute step beat based on elapsed monotonic time.\n   *\n   * @returns {Number}\n   */\n  get place () {\n    return this.durations.cast(this.elapsed, { is: 'ms', as: 'step' })\n  }\n\n  /**\n   * Centralized getter that allows for custom monotomic timer functions (`now`).\n   * Defaults to process.hrtime polyfill when a custom `now` function is not provided.\n   *\n   * @returns {Number}\n   */\n  get time () {\n    return typeof this.now === 'function' && this.clock ? this.now(this.clock) : hrtime()\n  }\n\n  /**\n   * Determines the base bach-js duration unit to use based on stateless config.\n   *\n   * Can be provided to cast as `is`: `gig.durations.cast(4, { is: gig.unit })`.\n   *\n   * @returns {String}\n   */\n  get unit () {\n    return this.stateless ? 'ms' : 'step'\n  }\n\n  /**\n   * Determines if the cursor is on the first step\n   *\n   * @returns {Boolean}\n   */\n  get first () {\n    return this.cursor === 0\n  }\n\n  /**\n   * Determines if the cursor is on the least measure, beat, or section\n   *\n   * @returns {Boolean}\n   */\n  get last () {\n    return this.cursor === this.durations.total\n  }\n\n  /**\n   * Determines if the track is actively playing\n   *\n   * @returns {Boolean}\n   */\n  get playing () {\n    return this.status === STATUS.playing\n  }\n\n  /**\n   * Determines if the track is paused\n   *\n   * @returns {Boolean}\n   */\n  get paused () {\n    return this.status === STATUS.paused\n  }\n\n\n  /**\n   * Determines if the track's music is loading (when audible).\n   */\n  get loading () {\n    return this.audible ? this.music.state() === 'loading' : false\n  }\n\n  /**\n   * Determines if the track's music is loaded (when audible).\n   */\n  get loaded () {\n    return this.audible ? this.music.state() === 'loaded' : this.active\n  }\n\n  /**\n   * Determines if the track is pristine (i.e. hasn't changed status since initialization).\n   *\n   * @returns {Boolean}\n   */\n  get pristine () {\n    return this.status === STATUS.pristine\n  }\n\n  /**\n   * Determines if the track is actively playing (currently the same as .playing)\n   *\n   * @returns {Boolean}\n   */\n  get active () {\n    return ACTIVE_STATUS.includes(this.status)\n  }\n\n  /**\n   * Determines if the track is inactive\n   *\n   * @returns {Boolean}\n   */\n  get inactive () {\n    return INACTIVE_STATUS.includes(this.status)\n  }\n\n  /**\n   * Determines if the track is expired\n   *\n   * @returns {Boolean}\n   */\n  get expired () {\n    return EXPIRED_STATUS.includes(this.status)\n  }\n\n  /**\n   * Determines if the track has a status where baseline playback can be started\n   *\n   * @returns {Boolean}\n   */\n  get based () {\n    return BASED_STATUS.includes(this.status)\n  }\n\n  /**\n   * The total duration of the track's run-time (in milliseconds).\n   *\n   * @returns {Number}\n   */\n  get duration () {\n    return this.durations.cast(this.durations.total, { as: 'ms' })\n  }\n\n  /**\n   * Establishes the origin time of run-time playback, skewed to pause time.\n   *\n   * @returns {Number}\n   */\n  get origin () {\n    return this.times.origin != null ? this.times.origin + this.skew : null\n  }\n\n  /**\n   * Determines the base time of the current step.\n   *\n   * @returns {Number}\n   */\n  get basis () {\n    return (this.times.last || this.times.origin) + this.skew\n  }\n\n  /**\n   * The amount of time that's elapsed since the track started playing.\n   *\n   * Used to determine the cursor step when Gig is set to stateless.\n   *\n   * @returns {Float}\n   */\n  get elapsed () {\n    return this.origin != null ? (this.time - this.origin) : 0\n  }\n\n  /**\n   * The progress of the track's audio (in milliseconds), modulated to 1 (e.g. 1.2 -> 0.2).\n   *\n   * @returns {Number}\n   */\n  get progress () {\n    return this.completion % 1\n  }\n\n  /**\n   * The run-time completion of the entire track (values exceeding 1 mean the track has looped).\n   *\n   * @returns {Number}\n   */\n  get completion () {\n    return this.elapsed / this.duration\n  }\n\n  /**\n   * The run-time progression (0-1) of the current step.\n   *\n   * @returns {Number}\n   */\n  get stride () {\n    return (this.time - this.basis) / this.interval\n  }\n\n  /**\n   * Determines the skew, in ms, of the clock. Returns 0 if no pause time exists.\n   *\n   * @returns {Number}\n   */\n  get skew () {\n    return this.time - (this.times.paused || this.time)\n  }\n\n  /**\n   * Determines the amount of run-time drift, in ms, of the current beat.\n   *\n   * @returns {Number}\n   */\n  get drift () {\n    return this.times.beat ? ((this.times.beat + this.skew) - this.moment(this.state.beat.index)) : 0\n  }\n\n  /**\n   * Provides an offset, in steps, based on the total number of iterations.\n   * Useful for adjusting between absolute (global) and relative (cyclic) duration calculations.\n   *\n   * @returns {Number}\n   */\n  get offset () {\n    return this.durations.total * Math.floor(this.iterations)\n  }\n\n  /**\n   * Whether or not the Gig object has associated audio.\n   *\n   * @returns {Boolean}\n   */\n  get audible () {\n    return this.audio && this.music\n  }\n\n  /**\n   * Whether or not the track is configured to loop playback indefinitely.\n   *\n   * @returns {Boolean}\n   */\n  get loops () {\n    return this.loop || !!(this.audible && this.music.loop())\n  }\n\n  /**\n   * Changes loop configuration of track and associated audio.\n   *\n   * @returns {Boolean}\n   */\n  set loops (loop) {\n    this.loop = loop\n\n    if (this.audible) {\n      this.music.loop(loop)\n    }\n  }\n\n  /**\n   * Determines the number of times the track has already looped/repeated.\n   *\n   * @returns {Number}\n   */\n  get iterations () {\n    return this.current / this.durations.total\n  }\n\n  /**\n   * Determines if the track has already looped/repeated.\n   *\n   * @returns {Boolean}\n   */\n  get repeating () {\n    return this.iterations >= 1\n  }\n\n  /**\n   * Specifies the limit of steps in a track\n   *\n   * @returns {Number}\n   */\n  get limit () {\n    return this.loops ? Math.Infinity : this.durations.total\n  }\n\n  /**\n   * Provides the index of the current pulse beat under the context of a looping metronome.\n   *\n   * @returns {Number}\n   */\n  get metronome () {\n    return this.durations.metronize(this.elapsed, { is: 'ms' })\n  }\n\n  /**\n   * Determines if the current step's beat has changed from the previous step's beat.\n   *\n   * @returns {Boolean}\n   */\n  get updated () {\n    return this.state.beat.index !== this.prev.beat.index\n  }\n\n  /**\n   * Synchronizes track with the Howler API\n   */\n  listen () {\n    this.music.on('play',  this.play)\n    this.music.on('pause', this.pause)\n    this.music.on('stop',  this.stop)\n    this.music.on('rate',  this.rate)\n    this.music.on('seek',  this.seek)\n  }\n\n  /**\n   * Instantiates a new clock which acts as the primary synchronization mechanism\n   */\n  // FIXME: This needs to return a Promise, that way `play` only gets called after the timer has been invoked\n  start () {\n    this.clock = this.timer(this)\n    this.times.origin = this.time\n\n    this.emit('start')\n    this.is('playing')\n  }\n\n  /**\n   * Loads the audio data and kicks off the synchronization clock\n   */\n  play () {\n    if (this.audible) {\n      const ready = () => {\n        if (this.check('killed')) {\n          return\n        }\n\n        this.start()\n        this.music.play()\n        this.emit('play')\n      }\n\n      if (this.loaded) {\n        ready()\n      } else {\n        this.music.once('load', ready)\n      }\n    } else {\n      this.start()\n      this.emit('play')\n    }\n\n    return this\n  }\n\n  /**\n   * Stops the audio and the synchronization clock (no resume)\n   */\n  stop () {\n    if (!this.clock) return this\n\n    if (this.audible) {\n      this.music.stop()\n      this.music.unload()\n    }\n\n    this.clock.stop()\n    this.emit('stop')\n\n    return this.reset().is('stopped')\n  }\n\n  /**\n   * Pauses the audio and the synchronization clock\n   */\n  pause () {\n    if (this.audible) this.music.pause()\n\n    this.times.paused = this.time\n\n    this.clock.pause()\n    this.emit('pause')\n\n    return this.is('paused')\n  }\n\n  /**\n   * Resumes the audio and the synchronization clock\n   */\n  resume () {\n    const invoke = () => {\n      const skew = this.time - this.times.paused\n\n      this.times.origin += skew\n      this.times.last += skew\n      this.times.beat += skew\n      this.times.paused = null\n\n      this.clock.resume()\n      this.emit('resume')\n\n      this.is('playing')\n    }\n\n    if (this.audible) {\n      this.music.once('play', invoke)\n      this.music.play()\n\n      return this\n    }\n\n    return invoke()\n  }\n\n  /**\n   * Toggles playback based on the current run-time status.\n   */\n  toggle () {\n    if (this.based) {\n      return this.play()\n    } else if (this.playing) {\n      return this.pause()\n    } else if (this.paused) {\n      return this.resume()\n    }\n\n    return this\n  }\n\n  /**\n   * Mutes the track audio\n   */\n  mute () {\n    if (this.audible) this.music.mute()\n\n    this.emit('mute')\n\n    return this\n  }\n\n  /**\n   * Seek to a new position in the track\n   *\n   * @param {Number} duration time value\n   * @param {String} [is] duration unit\n   */\n  seek (duration, is = 'step') {\n    if (this.audible) {\n      const max = this.durations.cast(this.music.duration(), { is: 'second', as: is })\n      const time = this.durations.cyclic(duration, { is, as: 'second', max })\n\n      this.music.seek(time)\n    }\n\n    this.travel(duration, is)\n    this.emit('seek')\n\n    return this\n  }\n\n  /**\n   * Invokes the action to perform on each interval and emits\n   * various events based on current state of the step.\n   * Only emits beat events if the beat has updated from the previous step.\n   */\n  step () {\n    this.index = this.times.last ? this.index + 1 : 0\n\n    const { state, interval } = this\n    const { beat, play, stop } = state\n    const { duration } = beat\n\n    this.emit('step', state)\n\n    if (stop.length) {\n      this.emit('stop:beat', stop)\n    }\n\n    if (!this.stateless && !this.updated) {\n      return this\n    }\n\n    if (this.repeating && this.first) {\n      if (this.loops) {\n        this.emit('loop', state)\n      } else {\n        return this.kill()\n      }\n    }\n\n    if (play.length) {\n      this.emit('play:beat', beat)\n      this.times.beat = this.time\n    }\n\n    this.times.last = this.time\n\n    return this\n  }\n\n  /**\n   * Converts a localized/relative/cyclic duration into its globalized/absolute version.\n   * The inverse of this conversion can be achieved with Gig.durations.cyclic().\n   *\n   * @param {Number} duration time value\n   * @param {Object} [lens] unit conversions\n   * @returns {Number}\n   */\n  globalize (duration, { is = 'step', as = 'step' } = {}) {\n    return this.durations.cyclic(duration, { is, as }) + this.durations.cast(this.offset, { as })\n  }\n\n  /**\n   * Determines when a duration occurs (in milliseconds, by default) globalized to the run-time origin.\n   *\n   * @param {Number} duration time value\n   * @param {Object} [lens] unit conversions\n   * @returns {Number}\n   */\n  moment (duration, { is = 'step', as = 'ms' } = {}) {\n    const time = this.globalize(duration, { is, as: 'ms' })\n    const moment = this.origin + time\n\n    return this.durations.cast(moment, { is: 'ms', as })\n  }\n\n  /**\n   * Moves playback cursor to the provided duration.\n   *\n   * @param {Number} duration time value\n   * @param {String} [is] duration unit\n   */\n  travel (duration, is = 'step') {\n    if (this.based) {\n      console.warn('[gig:travel] Currently unsupported on tracks that have not started playing')\n\n      return this\n    }\n\n    const step = this.durations.cast(duration, { is, as: 'step' })\n    const time = this.durations.cast(step, { as: 'ms' })\n    const index = Math.floor(step)\n    const last = this.durations.cast(index, { as: 'ms' })\n    const state = this.at(index)\n\n    this.index = index\n    this.times.last = last\n    this.times.origin = this.time - this.skew - time\n    this.times.beat = this.moment(state.beat.index) - this.skew\n    // TODO: Probably also need to adjust times.paused if already paused (seems to be causing a sporadic bug in gig.drift when traveling while paused)\n\n    // TODO: Determine if we want to emit a different event here instead for greater specificity and control\n    // TODO: Consider if we should emit `stop` as well on the beat we traveled from\n    if (state.play.length && this.paused) {\n      this.emit('play:beat', state.beat)\n    }\n\n    return this\n  }\n\n  /**\n   * Resets the cursor indices to their initial unplayed state\n   */\n  reset () {\n    this.index = 0\n    this.times = { origin: null, last: null, paused: null, beat: null }\n\n    return this\n  }\n\n  /**\n   * Removes all active event listeners\n   *\n   * TODO: Consider automatically stopping the track here if already running\n   */\n  // purge\n  clear () {\n    this.reset()\n    this.music = null\n\n    return this.removeAllListeners()\n  }\n\n  /**\n   * Immediately stops the track, its clock, and removes all active event listeners\n   */\n  kill () {\n    return this.stop().clear().is('killed')\n  }\n\n  /**\n   * Updates the playing status of the track (idempotent, no reactivity or side-effects).\n   */\n  is (status) {\n    const key = status.toLowerCase()\n    const value = STATUS[key]\n\n    if (!value) throw Error(`${key} is an invalid status`)\n\n    this.status = value\n\n    this.emit('update:status', key)\n\n    return this\n  }\n\n  /**\n   * Determines if the playing status matches the provided status key string.\n   *\n   * @returns {Boolean}\n   */\n  check (status) {\n    const key = status.toLowerCase()\n    const value = STATUS[key]\n\n    return this.status === value\n  }\n\n}\n\nObject.assign(Track.prototype, EventEmitter.prototype)\n\nexport const STATUS = {\n  pristine : Symbol('pristine'),\n  playing  : Symbol('playing'),\n  stopped  : Symbol('stopped'),\n  paused   : Symbol('paused'),\n  killed   : Symbol('killed')\n}\n\nexport const ACTIVE_STATUS = [STATUS.playing]\n\nexport const INACTIVE_STATUS = [\n  STATUS.pristine,\n  STATUS.stopped,\n  STATUS.paused,\n  STATUS.killed\n]\n\nexport const EXPIRED_STATUS = [\n  STATUS.stopped,\n  STATUS.killed\n]\n\nexport const BASED_STATUS = [\n  STATUS.pristine,\n  STATUS.stopped,\n  STATUS.killed\n]\n\nexport const CONSTANTS = Gig.CONSTANTS = {\n  STATUS,\n  ACTIVE_STATUS,\n  INACTIVE_STATUS,\n  EXPIRED_STATUS,\n  BASED_STATUS\n}\n\nexport default Gig\n"],"names":["clock","gig","tick","last","interval","loop","time","cursor","expired","cancel","step","raf","timer","play","pause","resume","stop","_exports","Gig","_Music","_inherits","_super","_createSuper","_this","_ref","arguments","length","undefined","source","audio","now","howler","_ref$stateless","stateless","_classCallCheck","call","EventEmitter","_assertThisInitialized","hrtime","index","times","origin","beat","paused","status","STATUS","pristine","music","Howl","Object","assign","src","ctx","_createClass","key","get","at","durations","cyclic","current","Math","floor","place","cast","elapsed","is","as","total","playing","audible","state","active","ACTIVE_STATUS","includes","INACTIVE_STATUS","EXPIRED_STATUS","BASED_STATUS","skew","completion","duration","basis","moment","iterations","set","loops","Infinity","metronize","prev","value","listen","on","rate","seek","start","emit","_this2","ready","check","loaded","once","unload","reset","_this3","invoke","toggle","based","mute","max","travel","updated","repeating","first","kill","globalize","_ref2","_ref2$is","_ref2$as","offset","_ref3","_ref3$is","_ref3$as","console","warn","clear","removeAllListeners","toLowerCase","Error","concat","Track","prototype","Symbol","stopped","killed","CONSTANTS"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;EACY,IAACA,KAAK,GAAG,SAARA,KAAKA,CAAIC,GAAG,EAAEC,IAAI,EAAK;IAClC,IAAIC,IAAI,GAAG,IAAI;IACf,IAAIC,QAAQ,GAAG,IAAI;IAEnB,IAAMC,IAAI,GAAG,SAAPA,IAAIA,CAAA,EAAS;MACjB,IAAQC,IAAI,GAAsBL,GAAG,CAA7BK,IAAI;QAAEC,MAAM,GAAcN,GAAG,CAAvBM,MAAM;QAAEC,OAAO,GAAKP,GAAG,CAAfO,OAAO;MAE7B,IAAIA,OAAO,EAAE,OAAOC,MAAM,EAAE;MAE5B,IAAIF,MAAM,KAAKJ,IAAI,EAAE;QACnBA,IAAI,GAAGI,MAAM;QAEbN,GAAG,CAACS,IAAI,EAAE;MACX;MAED,IAAI,OAAOR,IAAI,KAAK,UAAU,EAAE;QAC9BA,IAAI,CAACD,GAAG,EAAEK,IAAI,CAAC;MAChB;MAEDF,QAAQ,GAAG,IAAAO,eAAG,EAACN,IAAI,CAAC;IACrB,CAAA;IAED,IAAMI,MAAM,GAAG,SAATA,MAAMA,CAAA,EAAS;MACnBE,eAAG,CAACF,MAAM,CAACL,QAAQ,CAAC;MAEpBA,QAAQ,GAAG,IAAI;IAChB,CAAA;IAED,IAAMQ,KAAK,GAAG;MACZC,IAAI,WAAAA,KAAA,EAAI;QACNR,IAAI,EAAE;MACP,CAAA;MAEDS,KAAK,WAAAA,MAAA,EAAI;QACPL,MAAM,EAAE;MACT,CAAA;MAEDM,MAAM,WAAAA,OAAA,EAAI;QACRH,KAAK,CAACC,IAAI,EAAE;MACb,CAAA;MAEDG,IAAI,WAAAA,KAAA,EAAI;QACNb,IAAI,GAAG,IAAI;QACXM,MAAM,EAAE;MACT;IACF,CAAA;IAEDG,KAAK,CAACC,IAAI,EAAE;IAEZ,OAAOD,KAAK;EACd,CAAA;;ECpDA;AACA;AACA;EAFAK,QAAA,CAAAjB,KAAA,GAAAA,KAAA;EAAA,IAGakB,GAAG,0BAAAC,MAAA;IAAAC,SAAA,CAAAF,GAAA,EAAAC,MAAA;IAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,GAAA;IAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,SAAAA,IAAA,EAAiF;MAAA,IAAAK,KAAA;MAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,CAAA,CAAE;QAAhEG,MAAM,GAAAJ,IAAA,CAANI,MAAM;QAAEC,KAAK,GAAAL,IAAA,CAALK,KAAK;QAAExB,IAAI,GAAAmB,IAAA,CAAJnB,IAAI;QAAEO,KAAK,GAAAY,IAAA,CAALZ,KAAK;QAAEkB,GAAG,GAAAN,IAAA,CAAHM,GAAG;QAAEC,MAAM,GAAAP,IAAA,CAANO,MAAM;QAAAC,cAAA,GAAAR,IAAA,CAAES,SAAS;QAATA,SAAS,GAAAD,cAAA,cAAG,IAAI,GAAAA,cAAA;MAAAE,eAAA,OAAAhB,GAAA;MACtEK,KAAA,GAAAF,MAAA,CAAAc,IAAA,OAAMP,MAAM;MAEZQ,kBAAY,CAACD,IAAI,CAAAE,sBAAA,CAAAd,KAAA,EAAM;MAEvBA,KAAA,CAAKM,KAAK,GAAGA,KAAK;MAClBN,KAAA,CAAKlB,IAAI,GAAGA,IAAI;MACpB;MACIkB,KAAA,CAAKX,KAAK,GAAIA,KAAK,IAAIZ,KAAK;MAC5BuB,KAAA,CAAKO,GAAG,GAAGA,GAAG,IAAIQ,0BAAM;MAExBf,KAAA,CAAKgB,KAAK,GAAG,CAAC;MACdhB,KAAA,CAAKiB,KAAK,GAAG;QAAEC,MAAM,EAAE,IAAI;QAAEtC,IAAI,EAAE,IAAI;QAAEuC,IAAI,EAAE,IAAI;QAAEC,MAAM,EAAE;MAAM,CAAA;MACnEpB,KAAA,CAAKqB,MAAM,GAAGC,MAAM,CAACC,QAAQ;MAC7BvB,KAAA,CAAKU,SAAS,GAAGA,SAAS;MAE1B,IAAIJ,KAAK,EAAE;QACTN,KAAA,CAAKwB,KAAK,GAAG,IAAIC,YAAI,CAACC,MAAM,CAACC,MAAM,CAAC;UAClCC,GAAG,EAAEtB,KAAK;UACVuB,GAAG,EAAE,IAAI;UACT/C,IAAI,EAAJA;QACD,CAAA,EAAE0B,MAAM,CAAC,CAAC;MACZ;;MAEL;MAAA,OAAAR,KAAA;IACG;;IAEH;AACA;AACA;AACA;AACA;IAJA8B,YAAA,CAAAnC,GAAA;MAAAoC,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAa;QACX,OAAO,IAAI,CAACC,EAAE,CAAC,IAAI,CAACjD,MAAM,CAAC;MAC5B;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAA+C,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAY;QACV,OAAO,IAAI,CAACC,EAAE,CAAC,IAAI,CAACjD,MAAM,GAAG,CAAC,CAAC;MAChC;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAA+C,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAY;QACV,OAAO,IAAI,CAACC,EAAE,CAAC,IAAI,CAACjD,MAAM,GAAG,CAAC,CAAC;MAChC;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAA+C,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAc;QACZ,OAAO,IAAI,CAACE,SAAS,CAACC,MAAM,CAAC,IAAI,CAACC,OAAO,CAAC;MAC3C;;MAEH;AACA;AACA;AACA;AACA;AACA;AACA;IANA;MAAAL,GAAA;MAAAC,GAAA,EAOE,SAAAA,IAAA,EAAe;QACb,OAAO,CAAC,IAAI,CAACtB,SAAS,GAAG,IAAI,CAACM,KAAK,GAAGqB,IAAI,CAACC,KAAK,CAAC,IAAI,CAACC,KAAK,CAAC;MAC7D;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAR,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAa;QACX,OAAO,IAAI,CAACE,SAAS,CAACM,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE;UAAEC,EAAE,EAAE,IAAI;UAAEC,EAAE,EAAE;SAAQ,CAAC;MACnE;;MAEH;AACA;AACA;AACA;AACA;AACA;IALA;MAAAZ,GAAA;MAAAC,GAAA,EAME,SAAAA,IAAA,EAAY;QACV,OAAO,OAAO,IAAI,CAACzB,GAAG,KAAK,UAAU,IAAI,IAAI,CAAC9B,KAAK,GAAG,IAAI,CAAC8B,GAAG,CAAC,IAAI,CAAC9B,KAAK,CAAC,GAAG,IAAAsC,0BAAM,GAAE;MACtF;;MAEH;AACA;AACA;AACA;AACA;AACA;AACA;IANA;MAAAgB,GAAA;MAAAC,GAAA,EAOE,SAAAA,IAAA,EAAY;QACV,OAAO,IAAI,CAACtB,SAAS,GAAG,IAAI,GAAG,MAAM;MACtC;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAqB,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAa;QACX,OAAO,IAAI,CAAChD,MAAM,KAAK,CAAC;MACzB;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAA+C,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAY;QACV,OAAO,IAAI,CAAChD,MAAM,KAAK,IAAI,CAACkD,SAAS,CAACU,KAAK;MAC5C;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAb,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAe;QACb,OAAO,IAAI,CAACX,MAAM,KAAKC,MAAM,CAACuB,OAAO;MACtC;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAd,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAc;QACZ,OAAO,IAAI,CAACX,MAAM,KAAKC,MAAM,CAACF,MAAM;MACrC;;MAGH;AACA;AACA;IAFA;MAAAW,GAAA;MAAAC,GAAA,EAGE,SAAAA,IAAA,EAAe;QACb,OAAO,IAAI,CAACc,OAAO,GAAG,IAAI,CAACtB,KAAK,CAACuB,KAAK,EAAE,KAAK,SAAS,GAAG,KAAK;MAC/D;;MAEH;AACA;AACA;IAFA;MAAAhB,GAAA;MAAAC,GAAA,EAGE,SAAAA,IAAA,EAAc;QACZ,OAAO,IAAI,CAACc,OAAO,GAAG,IAAI,CAACtB,KAAK,CAACuB,KAAK,EAAE,KAAK,QAAQ,GAAG,IAAI,CAACC,MAAM;MACpE;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAjB,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAgB;QACd,OAAO,IAAI,CAACX,MAAM,KAAKC,MAAM,CAACC,QAAQ;MACvC;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAQ,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAc;QACZ,OAAOiB,aAAa,CAACC,QAAQ,CAAC,IAAI,CAAC7B,MAAM,CAAC;MAC3C;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAU,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAgB;QACd,OAAOmB,eAAe,CAACD,QAAQ,CAAC,IAAI,CAAC7B,MAAM,CAAC;MAC7C;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAU,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAe;QACb,OAAOoB,cAAc,CAACF,QAAQ,CAAC,IAAI,CAAC7B,MAAM,CAAC;MAC5C;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAU,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAa;QACX,OAAOqB,YAAY,CAACH,QAAQ,CAAC,IAAI,CAAC7B,MAAM,CAAC;MAC1C;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAU,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAgB;QACd,OAAO,IAAI,CAACE,SAAS,CAACM,IAAI,CAAC,IAAI,CAACN,SAAS,CAACU,KAAK,EAAE;UAAED,EAAE,EAAE;SAAM,CAAC;MAC/D;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAZ,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAc;QACZ,OAAO,IAAI,CAACf,KAAK,CAACC,MAAM,IAAI,IAAI,GAAG,IAAI,CAACD,KAAK,CAACC,MAAM,GAAG,IAAI,CAACoC,IAAI,GAAG,IAAI;MACxE;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAvB,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAa;QACX,OAAO,CAAC,IAAI,CAACf,KAAK,CAACrC,IAAI,IAAI,IAAI,CAACqC,KAAK,CAACC,MAAM,IAAI,IAAI,CAACoC,IAAI;MAC1D;;MAEH;AACA;AACA;AACA;AACA;AACA;AACA;IANA;MAAAvB,GAAA;MAAAC,GAAA,EAOE,SAAAA,IAAA,EAAe;QACb,OAAO,IAAI,CAACd,MAAM,IAAI,IAAI,GAAI,IAAI,CAACnC,IAAI,GAAG,IAAI,CAACmC,MAAM,GAAI,CAAC;MAC3D;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAa,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAgB;QACd,OAAO,IAAI,CAACuB,UAAU,GAAG,CAAC;MAC3B;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAxB,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAkB;QAChB,OAAO,IAAI,CAACS,OAAO,GAAG,IAAI,CAACe,QAAQ;MACpC;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAzB,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAc;QACZ,OAAO,CAAC,IAAI,CAACjD,IAAI,GAAG,IAAI,CAAC0E,KAAK,IAAI,IAAI,CAAC5E,QAAQ;MAChD;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAkD,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAY;QACV,OAAO,IAAI,CAACjD,IAAI,IAAI,IAAI,CAACkC,KAAK,CAACG,MAAM,IAAI,IAAI,CAACrC,IAAI,CAAC;MACpD;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAgD,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAa;QACX,OAAO,IAAI,CAACf,KAAK,CAACE,IAAI,GAAK,IAAI,CAACF,KAAK,CAACE,IAAI,GAAG,IAAI,CAACmC,IAAI,GAAI,IAAI,CAACI,MAAM,CAAC,IAAI,CAACX,KAAK,CAAC5B,IAAI,CAACH,KAAK,CAAC,GAAI,CAAC;MAClG;;MAEH;AACA;AACA;AACA;AACA;AACA;IALA;MAAAe,GAAA;MAAAC,GAAA,EAME,SAAAA,IAAA,EAAc;QACZ,OAAO,IAAI,CAACE,SAAS,CAACU,KAAK,GAAGP,IAAI,CAACC,KAAK,CAAC,IAAI,CAACqB,UAAU,CAAC;MAC1D;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAA5B,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAe;QACb,OAAO,IAAI,CAAC1B,KAAK,IAAI,IAAI,CAACkB,KAAK;MAChC;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAO,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAa;QACX,OAAO,IAAI,CAAClD,IAAI,IAAI,CAAC,EAAE,IAAI,CAACgE,OAAO,IAAI,IAAI,CAACtB,KAAK,CAAC1C,IAAI,EAAE,CAAC;MAC1D;;MAEH;AACA;AACA;AACA;AACA,SAJA;MAAA8E,GAAA,EAKE,SAAAA,IAAW9E,IAAI,EAAE;QACf,IAAI,CAACA,IAAI,GAAGA,IAAI;QAEhB,IAAI,IAAI,CAACgE,OAAO,EAAE;UAChB,IAAI,CAACtB,KAAK,CAAC1C,IAAI,CAACA,IAAI,CAAC;QACtB;MACF;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAiD,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAkB;QAChB,OAAO,IAAI,CAACI,OAAO,GAAG,IAAI,CAACF,SAAS,CAACU,KAAK;MAC3C;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAb,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAiB;QACf,OAAO,IAAI,CAAC2B,UAAU,IAAI,CAAC;MAC5B;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAA5B,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAa;QACX,OAAO,IAAI,CAAC6B,KAAK,GAAGxB,IAAI,CAACyB,QAAQ,GAAG,IAAI,CAAC5B,SAAS,CAACU,KAAK;MACzD;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAb,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAiB;QACf,OAAO,IAAI,CAACE,SAAS,CAAC6B,SAAS,CAAC,IAAI,CAACtB,OAAO,EAAE;UAAEC,EAAE,EAAE;SAAM,CAAC;MAC5D;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAX,GAAA;MAAAC,GAAA,EAKE,SAAAA,IAAA,EAAe;QACb,OAAO,IAAI,CAACe,KAAK,CAAC5B,IAAI,CAACH,KAAK,KAAK,IAAI,CAACgD,IAAI,CAAC7C,IAAI,CAACH,KAAK;MACtD;;MAEH;AACA;AACA;IAFA;MAAAe,GAAA;MAAAkC,KAAA,EAGE,SAAAC,OAAA,EAAU;QACR,IAAI,CAAC1C,KAAK,CAAC2C,EAAE,CAAC,MAAM,EAAG,IAAI,CAAC7E,IAAI,CAAC;QACjC,IAAI,CAACkC,KAAK,CAAC2C,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC5E,KAAK,CAAC;QAClC,IAAI,CAACiC,KAAK,CAAC2C,EAAE,CAAC,MAAM,EAAG,IAAI,CAAC1E,IAAI,CAAC;QACjC,IAAI,CAAC+B,KAAK,CAAC2C,EAAE,CAAC,MAAM,EAAG,IAAI,CAACC,IAAI,CAAC;QACjC,IAAI,CAAC5C,KAAK,CAAC2C,EAAE,CAAC,MAAM,EAAG,IAAI,CAACE,IAAI,CAAC;MAClC;;MAEH;AACA;AACA;MACA;IAAA;MAAAtC,GAAA;MAAAkC,KAAA,EACE,SAAAK,MAAA,EAAS;QACP,IAAI,CAAC7F,KAAK,GAAG,IAAI,CAACY,KAAK,CAAC,IAAI,CAAC;QAC7B,IAAI,CAAC4B,KAAK,CAACC,MAAM,GAAG,IAAI,CAACnC,IAAI;QAE7B,IAAI,CAACwF,IAAI,CAAC,OAAO,CAAC;QAClB,IAAI,CAAC7B,EAAE,CAAC,SAAS,CAAC;MACnB;;MAEH;AACA;AACA;IAFA;MAAAX,GAAA;MAAAkC,KAAA,EAGE,SAAA3E,KAAA,EAAQ;QAAA,IAAAkF,MAAA;QACN,IAAI,IAAI,CAAC1B,OAAO,EAAE;UAChB,IAAM2B,KAAK,GAAG,SAARA,KAAKA,CAAA,EAAS;YAClB,IAAID,MAAI,CAACE,KAAK,CAAC,QAAQ,CAAC,EAAE;cACxB;YACD;YAEDF,MAAI,CAACF,KAAK,EAAE;YACZE,MAAI,CAAChD,KAAK,CAAClC,IAAI,EAAE;YACjBkF,MAAI,CAACD,IAAI,CAAC,MAAM,CAAC;UAClB,CAAA;UAED,IAAI,IAAI,CAACI,MAAM,EAAE;YACfF,KAAK,EAAE;UACf,CAAO,MAAM;YACL,IAAI,CAACjD,KAAK,CAACoD,IAAI,CAAC,MAAM,EAAEH,KAAK,CAAC;UAC/B;QACP,CAAK,MAAM;UACL,IAAI,CAACH,KAAK,EAAE;UACZ,IAAI,CAACC,IAAI,CAAC,MAAM,CAAC;QAClB;QAED,OAAO,IAAI;MACZ;;MAEH;AACA;AACA;IAFA;MAAAxC,GAAA;MAAAkC,KAAA,EAGE,SAAAxE,KAAA,EAAQ;QACN,IAAI,CAAC,IAAI,CAAChB,KAAK,EAAE,OAAO,IAAI;QAE5B,IAAI,IAAI,CAACqE,OAAO,EAAE;UAChB,IAAI,CAACtB,KAAK,CAAC/B,IAAI,EAAE;UACjB,IAAI,CAAC+B,KAAK,CAACqD,MAAM,EAAE;QACpB;QAED,IAAI,CAACpG,KAAK,CAACgB,IAAI,EAAE;QACjB,IAAI,CAAC8E,IAAI,CAAC,MAAM,CAAC;QAEjB,OAAO,IAAI,CAACO,KAAK,EAAE,CAACpC,EAAE,CAAC,SAAS,CAAC;MAClC;;MAEH;AACA;AACA;IAFA;MAAAX,GAAA;MAAAkC,KAAA,EAGE,SAAA1E,MAAA,EAAS;QACP,IAAI,IAAI,CAACuD,OAAO,EAAE,IAAI,CAACtB,KAAK,CAACjC,KAAK,EAAE;QAEpC,IAAI,CAAC0B,KAAK,CAACG,MAAM,GAAG,IAAI,CAACrC,IAAI;QAE7B,IAAI,CAACN,KAAK,CAACc,KAAK,EAAE;QAClB,IAAI,CAACgF,IAAI,CAAC,OAAO,CAAC;QAElB,OAAO,IAAI,CAAC7B,EAAE,CAAC,QAAQ,CAAC;MACzB;;MAEH;AACA;AACA;IAFA;MAAAX,GAAA;MAAAkC,KAAA,EAGE,SAAAzE,OAAA,EAAU;QAAA,IAAAuF,MAAA;QACR,IAAMC,MAAM,GAAG,SAATA,MAAMA,CAAA,EAAS;UACnB,IAAM1B,IAAI,GAAGyB,MAAI,CAAChG,IAAI,GAAGgG,MAAI,CAAC9D,KAAK,CAACG,MAAM;UAE1C2D,MAAI,CAAC9D,KAAK,CAACC,MAAM,IAAIoC,IAAI;UACzByB,MAAI,CAAC9D,KAAK,CAACrC,IAAI,IAAI0E,IAAI;UACvByB,MAAI,CAAC9D,KAAK,CAACE,IAAI,IAAImC,IAAI;UACvByB,MAAI,CAAC9D,KAAK,CAACG,MAAM,GAAG,IAAI;UAExB2D,MAAI,CAACtG,KAAK,CAACe,MAAM,EAAE;UACnBuF,MAAI,CAACR,IAAI,CAAC,QAAQ,CAAC;UAEnBQ,MAAI,CAACrC,EAAE,CAAC,SAAS,CAAC;QACnB,CAAA;QAED,IAAI,IAAI,CAACI,OAAO,EAAE;UAChB,IAAI,CAACtB,KAAK,CAACoD,IAAI,CAAC,MAAM,EAAEI,MAAM,CAAC;UAC/B,IAAI,CAACxD,KAAK,CAAClC,IAAI,EAAE;UAEjB,OAAO,IAAI;QACZ;QAED,OAAO0F,MAAM,EAAE;MAChB;;MAEH;AACA;AACA;IAFA;MAAAjD,GAAA;MAAAkC,KAAA,EAGE,SAAAgB,OAAA,EAAU;QACR,IAAI,IAAI,CAACC,KAAK,EAAE;UACd,OAAO,IAAI,CAAC5F,IAAI,EAAE;QACxB,CAAK,MAAM,IAAI,IAAI,CAACuD,OAAO,EAAE;UACvB,OAAO,IAAI,CAACtD,KAAK,EAAE;QACzB,CAAK,MAAM,IAAI,IAAI,CAAC6B,MAAM,EAAE;UACtB,OAAO,IAAI,CAAC5B,MAAM,EAAE;QACrB;QAED,OAAO,IAAI;MACZ;;MAEH;AACA;AACA;IAFA;MAAAuC,GAAA;MAAAkC,KAAA,EAGE,SAAAkB,KAAA,EAAQ;QACN,IAAI,IAAI,CAACrC,OAAO,EAAE,IAAI,CAACtB,KAAK,CAAC2D,IAAI,EAAE;QAEnC,IAAI,CAACZ,IAAI,CAAC,MAAM,CAAC;QAEjB,OAAO,IAAI;MACZ;;MAEH;AACA;AACA;AACA;AACA;AACA;IALA;MAAAxC,GAAA;MAAAkC,KAAA,EAME,SAAAI,KAAMb,QAAQ,EAAe;QAAA,IAAbd,EAAE,GAAAxC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,MAAM;QACzB,IAAI,IAAI,CAAC4C,OAAO,EAAE;UAChB,IAAMsC,GAAG,GAAG,IAAI,CAAClD,SAAS,CAACM,IAAI,CAAC,IAAI,CAAChB,KAAK,CAACgC,QAAQ,EAAE,EAAE;YAAEd,EAAE,EAAE,QAAQ;YAAEC,EAAE,EAAED;UAAE,CAAE,CAAC;UAChF,IAAM3D,IAAI,GAAG,IAAI,CAACmD,SAAS,CAACC,MAAM,CAACqB,QAAQ,EAAE;YAAEd,EAAE,EAAFA,EAAE;YAAEC,EAAE,EAAE,QAAQ;YAAEyC,GAAG,EAAHA;WAAK,CAAC;UAEvE,IAAI,CAAC5D,KAAK,CAAC6C,IAAI,CAACtF,IAAI,CAAC;QACtB;QAED,IAAI,CAACsG,MAAM,CAAC7B,QAAQ,EAAEd,EAAE,CAAC;QACzB,IAAI,CAAC6B,IAAI,CAAC,MAAM,CAAC;QAEjB,OAAO,IAAI;MACZ;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAxC,GAAA;MAAAkC,KAAA,EAKE,SAAA9E,KAAA,EAAQ;QACN,IAAI,CAAC6B,KAAK,GAAG,IAAI,CAACC,KAAK,CAACrC,IAAI,GAAG,IAAI,CAACoC,KAAK,GAAG,CAAC,GAAG,CAAC;QAEjD,IAAQ+B,KAAK,GAAe,IAAI,CAAxBA,KAAK;UAAElE,QAAQ,GAAK,IAAI,CAAjBA,QAAQ;QACvB,IAAQsC,IAAI,GAAiB4B,KAAK,CAA1B5B,IAAI;UAAE7B,IAAI,GAAWyD,KAAK,CAApBzD,IAAI;UAAEG,IAAI,GAAKsD,KAAK,CAAdtD,IAAI;QAGxB,IAAI,CAAC8E,IAAI,CAAC,MAAM,EAAExB,KAAK,CAAC;QAExB,IAAItD,IAAI,CAACU,MAAM,EAAE;UACf,IAAI,CAACoE,IAAI,CAAC,WAAW,EAAE9E,IAAI,CAAC;QAC7B;QAED,IAAI,CAAC,IAAI,CAACiB,SAAS,IAAI,CAAC,IAAI,CAAC4E,OAAO,EAAE;UACpC,OAAO,IAAI;QACZ;QAED,IAAI,IAAI,CAACC,SAAS,IAAI,IAAI,CAACC,KAAK,EAAE;UAChC,IAAI,IAAI,CAAC3B,KAAK,EAAE;YACd,IAAI,CAACU,IAAI,CAAC,MAAM,EAAExB,KAAK,CAAC;UAChC,CAAO,MAAM;YACL,OAAO,IAAI,CAAC0C,IAAI,EAAE;UACnB;QACF;QAED,IAAInG,IAAI,CAACa,MAAM,EAAE;UACf,IAAI,CAACoE,IAAI,CAAC,WAAW,EAAEpD,IAAI,CAAC;UAC5B,IAAI,CAACF,KAAK,CAACE,IAAI,GAAG,IAAI,CAACpC,IAAI;QAC5B;QAED,IAAI,CAACkC,KAAK,CAACrC,IAAI,GAAG,IAAI,CAACG,IAAI;QAE3B,OAAO,IAAI;MACZ;;MAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAPA;MAAAgD,GAAA;MAAAkC,KAAA,EAQE,SAAAyB,UAAWlC,QAAQ,EAAqC;QAAA,IAAAmC,KAAA,GAAAzF,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAE;UAAA0F,QAAA,GAAAD,KAAA,CAA/BjD,EAAE;UAAFA,EAAE,GAAAkD,QAAA,cAAG,MAAM,GAAAA,QAAA;UAAAC,QAAA,GAAAF,KAAA,CAAEhD,EAAE;UAAFA,EAAE,GAAAkD,QAAA,cAAG,MAAM,GAAAA,QAAA;QAC7C,OAAO,IAAI,CAAC3D,SAAS,CAACC,MAAM,CAACqB,QAAQ,EAAE;UAAEd,EAAE,EAAFA,EAAE;UAAEC,EAAE,EAAFA;QAAE,CAAE,CAAC,GAAG,IAAI,CAACT,SAAS,CAACM,IAAI,CAAC,IAAI,CAACsD,MAAM,EAAE;UAAEnD,EAAE,EAAFA;SAAI,CAAC;MAC9F;;MAEH;AACA;AACA;AACA;AACA;AACA;AACA;IANA;MAAAZ,GAAA;MAAAkC,KAAA,EAOE,SAAAP,OAAQF,QAAQ,EAAmC;QAAA,IAAAuC,KAAA,GAAA7F,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAE;UAAA8F,QAAA,GAAAD,KAAA,CAA7BrD,EAAE;UAAFA,EAAE,GAAAsD,QAAA,cAAG,MAAM,GAAAA,QAAA;UAAAC,QAAA,GAAAF,KAAA,CAAEpD,EAAE;UAAFA,EAAE,GAAAsD,QAAA,cAAG,IAAI,GAAAA,QAAA;QACxC,IAAMlH,IAAI,GAAG,IAAI,CAAC2G,SAAS,CAAClC,QAAQ,EAAE;UAAEd,EAAE,EAAFA,EAAE;UAAEC,EAAE,EAAE;SAAM,CAAC;QACvD,IAAMe,MAAM,GAAG,IAAI,CAACxC,MAAM,GAAGnC,IAAI;QAEjC,OAAO,IAAI,CAACmD,SAAS,CAACM,IAAI,CAACkB,MAAM,EAAE;UAAEhB,EAAE,EAAE,IAAI;UAAEC,EAAE,EAAFA;SAAI,CAAC;MACrD;;MAEH;AACA;AACA;AACA;AACA;AACA;IALA;MAAAZ,GAAA;MAAAkC,KAAA,EAME,SAAAoB,OAAQ7B,QAAQ,EAAe;QAAA,IAAbd,EAAE,GAAAxC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,MAAM;QAC3B,IAAI,IAAI,CAACgF,KAAK,EAAE;UACdgB,OAAO,CAACC,IAAI,CAAC,4EAA4E,CAAC;UAE1F,OAAO,IAAI;QACZ;QAED,IAAMhH,IAAI,GAAG,IAAI,CAAC+C,SAAS,CAACM,IAAI,CAACgB,QAAQ,EAAE;UAAEd,EAAE,EAAFA,EAAE;UAAEC,EAAE,EAAE;SAAQ,CAAC;QAC9D,IAAM5D,IAAI,GAAG,IAAI,CAACmD,SAAS,CAACM,IAAI,CAACrD,IAAI,EAAE;UAAEwD,EAAE,EAAE;SAAM,CAAC;QACpD,IAAM3B,KAAK,GAAGqB,IAAI,CAACC,KAAK,CAACnD,IAAI,CAAC;QAC9B,IAAMP,IAAI,GAAG,IAAI,CAACsD,SAAS,CAACM,IAAI,CAACxB,KAAK,EAAE;UAAE2B,EAAE,EAAE;SAAM,CAAC;QACrD,IAAMI,KAAK,GAAG,IAAI,CAACd,EAAE,CAACjB,KAAK,CAAC;QAE5B,IAAI,CAACA,KAAK,GAAGA,KAAK;QAClB,IAAI,CAACC,KAAK,CAACrC,IAAI,GAAGA,IAAI;QACtB,IAAI,CAACqC,KAAK,CAACC,MAAM,GAAG,IAAI,CAACnC,IAAI,GAAG,IAAI,CAACuE,IAAI,GAAGvE,IAAI;QAChD,IAAI,CAACkC,KAAK,CAACE,IAAI,GAAG,IAAI,CAACuC,MAAM,CAACX,KAAK,CAAC5B,IAAI,CAACH,KAAK,CAAC,GAAG,IAAI,CAACsC,IAAI;QAC/D;;QAEA;QACA;QACI,IAAIP,KAAK,CAACzD,IAAI,CAACa,MAAM,IAAI,IAAI,CAACiB,MAAM,EAAE;UACpC,IAAI,CAACmD,IAAI,CAAC,WAAW,EAAExB,KAAK,CAAC5B,IAAI,CAAC;QACnC;QAED,OAAO,IAAI;MACZ;;MAEH;AACA;AACA;IAFA;MAAAY,GAAA;MAAAkC,KAAA,EAGE,SAAAa,MAAA,EAAS;QACP,IAAI,CAAC9D,KAAK,GAAG,CAAC;QACd,IAAI,CAACC,KAAK,GAAG;UAAEC,MAAM,EAAE,IAAI;UAAEtC,IAAI,EAAE,IAAI;UAAEwC,MAAM,EAAE,IAAI;UAAED,IAAI,EAAE;QAAM,CAAA;QAEnE,OAAO,IAAI;MACZ;;MAEH;AACA;AACA;AACA;AACA;MACA;IAAA;MAAAY,GAAA;MAAAkC,KAAA,EACE,SAAAmC,MAAA,EAAS;QACP,IAAI,CAACtB,KAAK,EAAE;QACZ,IAAI,CAACtD,KAAK,GAAG,IAAI;QAEjB,OAAO,IAAI,CAAC6E,kBAAkB,EAAE;MACjC;;MAEH;AACA;AACA;IAFA;MAAAtE,GAAA;MAAAkC,KAAA,EAGE,SAAAwB,KAAA,EAAQ;QACN,OAAO,IAAI,CAAChG,IAAI,EAAE,CAAC2G,KAAK,EAAE,CAAC1D,EAAE,CAAC,QAAQ,CAAC;MACxC;;MAEH;AACA;AACA;IAFA;MAAAX,GAAA;MAAAkC,KAAA,EAGE,SAAAvB,GAAIrB,MAAM,EAAE;QACV,IAAMU,GAAG,GAAGV,MAAM,CAACiF,WAAW,EAAE;QAChC,IAAMrC,KAAK,GAAG3C,MAAM,CAACS,GAAG,CAAC;QAEzB,IAAI,CAACkC,KAAK,EAAE,MAAMsC,KAAK,IAAAC,MAAA,CAAIzE,GAAG,2BAAwB;QAEtD,IAAI,CAACV,MAAM,GAAG4C,KAAK;QAEnB,IAAI,CAACM,IAAI,CAAC,eAAe,EAAExC,GAAG,CAAC;QAE/B,OAAO,IAAI;MACZ;;MAEH;AACA;AACA;AACA;AACA;IAJA;MAAAA,GAAA;MAAAkC,KAAA,EAKE,SAAAS,MAAOrD,MAAM,EAAE;QACb,IAAMU,GAAG,GAAGV,MAAM,CAACiF,WAAW,EAAE;QAChC,IAAMrC,KAAK,GAAG3C,MAAM,CAACS,GAAG,CAAC;QAEzB,OAAO,IAAI,CAACV,MAAM,KAAK4C,KAAK;MAC7B;IAAA;IAAA,OAAAtE,GAAA;EAAA,EAprBsB8G,aAAK;EAAA/G,QAAA,CAAAC,GAAA,GAAAA,GAAA;EAwrB9B+B,MAAM,CAACC,MAAM,CAAC8E,aAAK,CAACC,SAAS,EAAE7F,kBAAY,CAAC6F,SAAS,CAAC;EAE1C,IAACpF,MAAM,GAAG;IACpBC,QAAQ,EAAGoF,MAAM,CAAC,UAAU,CAAC;IAC7B9D,OAAO,EAAI8D,MAAM,CAAC,SAAS,CAAC;IAC5BC,OAAO,EAAID,MAAM,CAAC,SAAS,CAAC;IAC5BvF,MAAM,EAAKuF,MAAM,CAAC,QAAQ,CAAC;IAC3BE,MAAM,EAAKF,MAAM,CAAC,QAAQ;EAC5B,CAAC;EAAAjH,QAAA,CAAA4B,MAAA,GAAAA,MAAA;EAEW,IAAC2B,aAAa,GAAG,CAAC3B,MAAM,CAACuB,OAAO,CAAC;EAAAnD,QAAA,CAAAuD,aAAA,GAAAA,aAAA;EAEjC,IAACE,eAAe,GAAG,CAC7B7B,MAAM,CAACC,QAAQ,EACfD,MAAM,CAACsF,OAAO,EACdtF,MAAM,CAACF,MAAM,EACbE,MAAM,CAACuF,MAAM,CACd;EAAAnH,QAAA,CAAAyD,eAAA,GAAAA,eAAA;EAEW,IAACC,cAAc,GAAG,CAC5B9B,MAAM,CAACsF,OAAO,EACdtF,MAAM,CAACuF,MAAM,CACd;EAAAnH,QAAA,CAAA0D,cAAA,GAAAA,cAAA;EAEW,IAACC,YAAY,GAAG,CAC1B/B,MAAM,CAACC,QAAQ,EACfD,MAAM,CAACsF,OAAO,EACdtF,MAAM,CAACuF,MAAM,CACd;EAAAnH,QAAA,CAAA2D,YAAA,GAAAA,YAAA;EAEW,IAACyD,SAAS,GAAGnH,GAAG,CAACmH,SAAS,GAAG;IACvCxF,MAAM,EAANA,MAAM;IACN2B,aAAa,EAAbA,aAAa;IACbE,eAAe,EAAfA,eAAe;IACfC,cAAc,EAAdA,cAAc;IACdC,YAAY,EAAZA;EACF,CAAA;EAAA3D,QAAA,CAAAoH,SAAA,GAAAA,SAAA;AAAA"}